<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-05T15:47:58-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rik van den Ende</title><subtitle>A blog with some tech posts and maybe some pictures</subtitle><author><name>Rik van den Ende</name><email>rik.ende@gmail.com</email></author><entry><title type="html">Writing and maintaining Jenkins Plugins</title><link href="http://localhost:4000/jenkins/2020/08/05/jenkins-plugins/" rel="alternate" type="text/html" title="Writing and maintaining Jenkins Plugins" /><published>2020-08-05T11:00:00-04:00</published><updated>2020-08-05T11:00:00-04:00</updated><id>http://localhost:4000/jenkins/2020/08/05/jenkins-plugins</id><content type="html" xml:base="http://localhost:4000/jenkins/2020/08/05/jenkins-plugins/">&lt;p&gt;There are enough quick howto and tutorial pages on Jenkins plugins on the internet, which explain the minimum steps 
needed to start a plugin project. There is also the extremely long official wiki, with pages varying from extremely 
detailed and informative, to last updated 2011.&lt;/p&gt;

&lt;p&gt;This document aims to be somewhere in the middle between a quick howto and the wiki: it needs to be short enough to 
be easily kept up to date, but still explain what the steps in the howto pages are for.&lt;/p&gt;

&lt;h3 id=&quot;jenkins-plugins&quot;&gt;Jenkins plugins&lt;/h3&gt;

&lt;p&gt;Jenkins allows developers to extend its functionality with so called &lt;em&gt;plugins&lt;/em&gt;. These are extensions to the Jenkins 
API that allow us to write code that will be loaded into Jenkins to add to the existing functionality, or change its 
behavior. This mechanism can be very useful to encapsulate &lt;em&gt;niche&lt;/em&gt; functionality, that some Jenkins users might need, 
without saddling the rest of the user base with vast amounts of functionality they will never use. It also allows 
users to add custom functionality that is extremely specific for their own project or business.&lt;/p&gt;

&lt;p&gt;Each plugin gets its own classloader, which delegates to the Jenkins core classloader. For the context of this blog, 
it isn’t necessary to know exactly what this means, other than the following consequences:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Your plugin runs in the same JVM as the Jenkins code. If you crash your JVM, Jenkins crashes along with your code.&lt;/li&gt;
  &lt;li&gt;Unloading classes from a classloader is not supported. This means a new plugin can be used right away, but deleting 
or updating an existing plugin requires Jenkins to be restarted.&lt;/li&gt;
  &lt;li&gt;Your plugin will be loaded system wide. If you change existing behavior for your own builds, everyone else’s 
builds may be affected as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extension-points&quot;&gt;Extension points&lt;/h3&gt;

&lt;p&gt;The plugin model for extending a system is not without downsides. One misbehaving plugin can take down the whole 
system. Another disadvantage of plugins in general can be, that it tightly couples a part of the internal API to the 
client code, forcing you to update all the client code when the internal API changes. Jenkins deals with this by 
providing extension points; a set of interfaces and abstract classes designed as a contract for implementing or 
extending functionality. Plugins can also define custom extension points, so you can write plugins to extend other 
plugins.&lt;/p&gt;

&lt;p&gt;There are hundreds of extension points defined. The Jenkins 
&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugin+Cookbook&quot;&gt;plugin cookbook&lt;/a&gt; provides a handy and short overview of 
the ones you will most likely be interested in for developing your plugin:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;I want to&lt;/th&gt;
      &lt;th&gt;ExtensionPoint&lt;/th&gt;
      &lt;th&gt;Sample plugin&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Add a way to log in to Jenkins&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/?hudson/model/Descriptor.html&quot;&gt;SecurityRealm&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Google+Login+Plugin&quot;&gt;Google Login Plugin&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Add a new build type or operation&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html&quot;&gt;Builder&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Hello World Maven archetype&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Do something for every build&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/tasks/BuildStep.html&quot;&gt;BuildStep&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Trigger some action after a build completes&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/tasks/Publisher.html&quot;&gt;Publisher&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Discard+Old+Build+plugin&quot;&gt;DiscardBuildPublisher&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Trigger a build&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/triggers/Trigger.html&quot;&gt;Trigger&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Files+Found+Trigger&quot;&gt;Files Found Trigger&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Record some stat with every project build&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/tasks/Recorder.html&quot;&gt;Recorder&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Discard+Old+Build+plugin&quot;&gt;DiscardBuildPublisher&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Markup a ChangeLog message&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/tasks/ChangeLogAnnotator.html&quot;&gt;ChangeLogAnnotator&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Gerrit Trigger Plugin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Add a link to /manage&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://javadoc.jenkins-ci.org/hudson/model/ManagementLink.html&quot;&gt;ManagementLink&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;installing--uninstalling-plugins&quot;&gt;Installing / uninstalling plugins&lt;/h3&gt;

&lt;p&gt;Jenkins plugins are distributed in the form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hpi&lt;/code&gt; files. An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hpi&lt;/code&gt; file is a jar file that follows certain 
conventions. The name of the file before the .hpi is the short name of the plugin, and will be a unique identifier 
inside the Jenkins system. The hpi also contains all the jars that contain your plugin code, as well as their 
dependencies, and any static resources such as images and html pages. We don’t make these by hand, the 
maven-hpi-plugin does this for us.&lt;/p&gt;

&lt;p&gt;To manage plugins, go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manage Jenkins &amp;gt; Manage Plugins &amp;gt; Advanced&lt;/code&gt;. Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hpi&lt;/code&gt; file can be uploaded&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-05/jenkins-installing-plugin.png&quot; alt=&quot;Installing plugin&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If that is successful, you should be able to see your plugin under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manage Plugins &amp;gt; Installed&lt;/code&gt;. Here the plugin can 
also be downgraded to the previously installed build, or uninstalled, which will normally require a restart to take 
effect.&lt;/p&gt;

&lt;h3 id=&quot;writing-your-own-plugin&quot;&gt;Writing your own plugin&lt;/h3&gt;

&lt;p&gt;Before you write your own plugin, Jenkins recommends that you first look at the 
&lt;a href=&quot;https://plugins.jenkins.io&quot;&gt;list of available plugins&lt;/a&gt; to see if 
there is one that already or almost does what you want, and if so, contribute to that rather than starting your own 
project. This not only saves you time, but also keeps under control the growth of the amount of code in the wild that 
may break if they make a big change.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;The easiest way to get started is to use the maven archtype defined for jenkins plugins:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn archetype:generate -Dfilter=io.jenkins.archetypes:plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This allows you to choose between generating an empty skeleton, containing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; and the directory structure for 
a plugin, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global-configuration-plugin&lt;/code&gt;, which creates a section on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manage Jenkins &amp;gt; Configure System&lt;/code&gt; page, and a 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world-plugin&lt;/code&gt;, which creates a plugin based on the builder extension point.&lt;/p&gt;

&lt;p&gt;This article will walk you through creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world-plugin&lt;/code&gt;. You will see that standard maven project structure 
has been generated.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jenkins-ci.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.43&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;relativePath&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;Hello World&lt;/h3&gt;

&lt;p&gt;A java class called HelloWorldBuilder has been created under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/java&lt;/code&gt;, as well as a directory with the same name 
under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main /resources&lt;/code&gt;. This is where the UI elements for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HelloWorldBuilder&lt;/code&gt; class will be defined. The full 
path and directory name must be identical to the package and classname of the corresponding Java class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-05/jenkins-config-jelly.png&quot; alt=&quot;config.jelly&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The user interface elements are defined in xml templates called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.jelly&lt;/code&gt;. Additionally there can be resource 
bundles for i18n support, and help files that follow the naming convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help-fieldName.html&lt;/code&gt; for each field defined 
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.jelly&lt;/code&gt; file. Configuration-by-naming-convention is used all over in Jenkins Plugin development. 
Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HelloWorldBuilder&lt;/code&gt; class, you find a static inner class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuildDescriptorImpl&lt;/code&gt;, which is annotated with 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Extension&lt;/code&gt;, and extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hudson.model.Descriptor&lt;/code&gt;. This inner class informs Jenkins about our extension, how it is 
instantiated, and how it interacts with the UI elements defined in the jelly files.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Extension&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DescriptorImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuildStepDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Symbol&lt;/code&gt; annotation defines the name this Extension will have in the Jenkins pipeline syntax:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jenkins&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-05/jenkins_add_build_step.png&quot; alt=&quot;Build step&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isApplicable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hudson.model.FreeStyleProject&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The name of the plugin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDisplayName&lt;/code&gt; method provides the name of the plugin in the configuration of the project in Jenkins, and the 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isApplicable&lt;/code&gt; method determines whether for which types of Jenkins projects the plugin should be available. Just return 
true if the plugin supports all kinds of projects. If this method returns false, this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtensionPoint&lt;/code&gt; will not be 
available for any freestyle build, but it it will still be available in a pipeline script.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Descriptor&lt;/code&gt; implementation can also contain the code for validating UI entry fields, following the naming 
convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doCheckFieldName&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FieldName&lt;/code&gt; is the name of the field in the corresponding jelly file.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormValidation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCheckName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@QueryParameter&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name is required&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please capitalize your name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a similar way, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Descriptor&lt;/code&gt; methods called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFillFieldNameItems&lt;/code&gt; can pre-fill options in a dropdown menu:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListBoxModel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFillCredentialsIdItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@AncestorInPath&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@QueryParameter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverURI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StandardListBoxModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;includeEmptyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;includeAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ACL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StandardUsernamePasswordCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will provide the values for a credentials dropdown defined in jelly:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;f:entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Credentials&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;field=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;credentialsId&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:select&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/f:entry&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is more about &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Jelly+form+controls&quot;&gt;Jelly form controls&lt;/a&gt; on the Jenkins wiki.
The form fields defined this way, are tied to your extension point via a constructor with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@DataBoundConstructor&lt;/code&gt; 
annotation, or setters annotated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@DataBoundSetter&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DataBoundConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HelloWorldBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtensionPoint&lt;/code&gt; that you are implementing will also have methods such as prebuild, called before Jenkins starts a 
build, and perform, which runs during the given build, which you can override to add or change behavior.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Launcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;We are running: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; in workspace &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-plugin-in-intellij&quot;&gt;Running the plugin in Intellij&lt;/h3&gt;

&lt;p&gt;We now have all the code in place to run a build using the plugin. We can run and debug an instance of Jenkins using 
the maven &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hpi:run&lt;/code&gt; plugin. This works very nicely in Intellij. Simply make a new Maven run configuration with the 
command line: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hpi:run&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-05/jenkins_intellij_run_configuration.png&quot; alt=&quot;Run configuration&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jetty.port&lt;/code&gt; argument in the example above, configures the port this Jenkins instance will be bound to. The 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.jenkins-ci&lt;/code&gt; plugin parent pom configures the maven-enforcer plugin with a very strict set of custom rules that will 
help you make your plugin work nicely with Jenkins, and help avoid introducing certain obscure bugs. It’s a good idea 
not to ignore enforcer warnings and errors, but during developing or debugging the plugin, having your build fail to 
run on every enforcer warning can get in the way. You can toggle this behavior off with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enforcer.fail=false&lt;/code&gt;. It is a 
mistake to do this in your release build. If you are confident an issue found by enforcer should be ignored, you can 
explicitly suppress it in your code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Should throw an exception in case of null
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SuppressFBWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VirtualChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toComputer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Execute the run configuration, and open a browser: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:8090/jenkins&lt;/code&gt;
The Jenkins instance started by hpi:run stores its state in a directory called work. Any items you configure in this 
Jenkins instance, plugins you install, updates you run, will be stored here. If you need to start from scratch, delete 
this directory. It will be re-created on the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hpi:run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-05/jenkins_work_directory.png&quot; alt=&quot;Run configuration&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The snippet generator can generate an example of pipeline syntax for thisplugin. For every constructor argument it will 
attempt to call a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFieldName()&lt;/code&gt; in the extension point, and use the value returned in the example:&lt;/p&gt;

&lt;p&gt;Generated snippet:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jenkins&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this reason, it is probably not useful to generate simple getters for these fields.&lt;/p&gt;

&lt;h3 id=&quot;state-and-serializability&quot;&gt;State and serializability&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ERROR] Class io.jenkins.plugins.sample.model.HelloObject defines non-transient non-serializable instance field
unserializableObject [io.jenkins.plugins.sample.model.HelloObject] In HelloObject.java SE_BAD_FIELD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which occurs when you try to build a plugin project containing a Serializable class that has a non-serializable 
property:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloObject&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnserializableObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unserializableObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jenkins stores the state of your plugin in XML form, and your code may end up being stopped, restored and resumed. 
In a multi node Jenkins setup, part or all of your code may be executed on another node. For this reason, the state 
of your object must be properly (de)serializable. If you need unserializable instance variables in your class, mark 
them transient, and make sure they can be recreated and initialized from serializable state.&lt;/p&gt;

&lt;h3 id=&quot;running-on-the-agent&quot;&gt;Running on the agent&lt;/h3&gt;

&lt;p&gt;All of your plugin code will run on the Jenkins master, unless you explicitly write code to execute parts of it on the 
agent. This means that any cpu or memory intensive code and blocking calls in your plugin code can have a significant 
impact on the master. If your plugin has to perform such operations, you can wrap those parts of your code in a class 
that extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hudson.remoting.Callable&lt;/code&gt; and run it on an agent. You will also need to do this if your plugin needs to 
access the workspace, because the files will be on the agent, not on the master.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AgentRunner&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MasterToSlaveCallable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AgentRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;h3 id=&quot;extend-jenkins-wiki&quot;&gt;Extend Jenkins Wiki&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Extend+Jenkins&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Extend+Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugin-cookbook&quot;&gt;Plugin Cookbook&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugin+Cookbook&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Plugin+Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jelly-form-controls&quot;&gt;Jelly Form Controls&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Jelly+form+controls&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Jelly+form+controls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;explanation-on-the-role-of-classloaders-in-jenkins&quot;&gt;Explanation on the role of classloaders in Jenkins&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/doc/developer/plugin-development/dependencies-and-class-loading/&quot;&gt;https://jenkins.io/doc/developer/plugin-development/dependencies-and-class-loading/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Rik van den Ende</name><email>rik.ende@gmail.com</email></author><summary type="html">There are enough quick howto and tutorial pages on Jenkins plugins on the internet, which explain the minimum steps needed to start a plugin project. There is also the extremely long official wiki, with pages varying from extremely detailed and informative, to last updated 2011.</summary></entry><entry><title type="html">Jenkins Shared Libraries</title><link href="http://localhost:4000/jenkins/2020/08/04/jenkins-shared-library/" rel="alternate" type="text/html" title="Jenkins Shared Libraries" /><published>2020-08-04T08:00:00-04:00</published><updated>2020-08-04T08:00:00-04:00</updated><id>http://localhost:4000/jenkins/2020/08/04/jenkins-shared-library</id><content type="html" xml:base="http://localhost:4000/jenkins/2020/08/04/jenkins-shared-library/">&lt;p&gt;When you maintain a number of projects, each with their own Jenkinsfile, you will find you are copying the same 
code over and over again. Shared libraries provide a way to share code and simplify Jenkinsfile creation, allowing your 
team to produce pipelines faster.&lt;/p&gt;

&lt;h3 id=&quot;how-pipeline-libraries-work&quot;&gt;How pipeline libraries work&lt;/h3&gt;

&lt;p&gt;A shared library can be loaded in your pipeline script with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Library&lt;/code&gt; annotation
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Library('shared-library@v1.0') _&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The library is freshly checked out from git at the start of every build.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@version&lt;/code&gt; part corresponds with the name of the branch of your shared library repo. 
If it’s omitted, the default version specified in the global- or folder configuration is loaded. There you can also 
specify whether or not you allow overriding that version.&lt;/p&gt;

&lt;h4 id=&quot;global-or-folder-level&quot;&gt;Global or Folder level&lt;/h4&gt;
&lt;p&gt;A shared pipeline library can be configured either globally, or on a folder, if the Folders Plugin is installed. 
The behavior in both cases is different. A global shared library is considered &lt;em&gt;trusted&lt;/em&gt;, and does not run in the 
sandbox. This means the library is able to, for instance, download binaries from the internet and run them on your 
master. It can use groovy’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; annotation to pull dependencies from artifactory. Jenkins admins should carefully 
evaluate whether or not this should be allowed on a master.&lt;/p&gt;

&lt;p&gt;A shared pipeline library creates a separate environment from the Jenkins master per-pipeline. This means that every 
library loads all of its resources (imports, variables, functions, classes, etc.) per pipeline rather than what 
happens with a plugin where it loads them once. Each pipeline loads its initial environment based on what is loaded 
using pipeline plugins and then loads your shared library on top of that. This means that each time you are doing 
something like a rest call, it has to load those resources for each pipeline and those loads could happen at the very 
same time. The grab annotation is single threaded, and can potentially cause a complete deadlock in pipeline execution.&lt;/p&gt;

&lt;p&gt;Shared libraries configured on a folder run in the sandbox, and are much more limited in what they can do and what 
resources they can access. It can’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Grab&lt;/code&gt; or download content from the internet.&lt;/p&gt;

&lt;h4 id=&quot;flyweight-and-heavyweight-executors&quot;&gt;Flyweight and heavyweight executors&lt;/h4&gt;
&lt;p&gt;Jenkins defines flyweight and heavyweight executors. A flyweight executor is just a java thread running on the master. 
All of the pipeline code other than the steps themselves runs on the master using a flyweight executor. Steps may use 
heavyweight executors to do work on the agent if they are enclosed in a node block.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo $result&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the step defined above, only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $result part&lt;/code&gt; is executed on the agent, the computation runs on the master. 
Don’t put computationally intensive operations in your pipeline library, and don’t use blocking I/O calls, or you may 
end up blocking the master. Cloudbees recommends using shell steps for all your resource intensive work. Cloudbees 
pecifically warns not to do things like XML or JSON parsing in the groovy code.&lt;/p&gt;

&lt;h4 id=&quot;groovy-but-not-really&quot;&gt;Groovy but not really&lt;/h4&gt;

&lt;p&gt;The syntax of pipeline scripts is groovy, but it is not executed as-is. It is transformed at compile time to to 
Continuation Passing Style (CPS), which adds safety, and makes the execution durable across master restarts, but it 
comes at a price. The code runs much slower than native groovy, and it supports only a small subset of groovy 
features. All variables used in CPS code must be serializable. For more complex code, use @NonCPS annotated methods. 
This still runs on the master, but is not transformed. In runs much faster and allows non-serializable local variables 
(parameters and return types must be serializable), but it will not survive being suspended and resumed, and it cannot 
use pipeline steps inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NonCPS&lt;/code&gt; method. A method annotated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NonCPS&lt;/code&gt; cannot call a method that has been 
CPS transformed.&lt;/p&gt;

&lt;h4 id=&quot;project-structure&quot;&gt;Project structure&lt;/h4&gt;
&lt;p&gt;Jenkins Shared Library projects are expected to have the following directory structure:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(root)
+- src                     # Groovy source files
|   +- org
|       +- foo
|           +- Bar.groovy  # for org.foo.Bar class
+- vars
|   +- foo.groovy          # for global 'foo' variable
|   +- foo.txt             # help for 'foo' variable
+- resources               # resource files (external libraries only)
|   +- org
|       +- foo
|           +- bar.json    # static helper data for org.foo.Bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;src&quot;&gt;src&lt;/h4&gt;
&lt;p&gt;The src directory contains class definitions that will be available on the classpath. In a scripted pipeline build, it 
is possible to instantiate these classes to run the containing code. If you do this, keep in mind that the groovy code 
in a scripted pipeline runs on the master, so avoid doing this for resource intensive code.
You can use classes defined under src in your scripted pipeline syntax, but always keep in mind that all this code, in 
every build that uses them, will run on the master. Technically you can use these in a declarative pipeline script too, 
but then you’re no longer strictly using declarative syntax.&lt;/p&gt;

&lt;h4 id=&quot;vars&quot;&gt;vars&lt;/h4&gt;
&lt;p&gt;The vars directory contains scripts that are available as variables in the pipeline. The name of the file is the name 
of the variable. In Jenkins groovy terms, ‘variables’ can refer to values, functions, closures etc. Anything you 
declare here will be available in the scope of your pipeline script.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def doSomething(arg) { ... }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The method above in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vars/foo.groovy&lt;/code&gt; can be called as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.doSomething(argument)&lt;/code&gt;. A method called call operates 
as a custom pipeline step that corresponds with the file name, if it has exactly this method signature:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def call(Map args = [:], Closure block) { ... }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The arguments map and the closure block are optional.&lt;/p&gt;

&lt;p&gt;If the last parameter of a method call is a closure, groovy syntax allows you to place this closure outside the 
brackets of the method call. This means that a pipeline step defined in a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vars/foo.groovy&lt;/code&gt; that contains 
a code block is defined as follows:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;can be used in a pipeline script with the following syntax:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo step 1'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo step 2'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The groovy scripts under vars can be documented with corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; files with the same name. According to the 
documentation, these help texts support the system’s configured markdown formatter, so it could be html, markdown etc, 
depending on which markup plugin is installed. You can select the system’s markup formatter under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/configureSecurity&lt;/code&gt;. 
The help texts you add show up under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline-syntax/globals&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Files under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resources/&lt;/code&gt; directory can be loaded by the built in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libraryResource&lt;/code&gt; step, which will return the content 
as a string.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def json = libraryResource 'org/foo/bar.json'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The line above will load the content of the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org/foo/bar.json&lt;/code&gt; into the variable json.
Even though this json example can be found in the official cloudbees documentation, they’re actually warning you to 
avoid json parsing in groovy, because of the associated cpu and memory load on the master. A better example might be 
this:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libraryResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'com/example/scripts/example.sh'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$script&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;gdsl&quot;&gt;GDSL&lt;/h4&gt;
&lt;p&gt;A groovy DSL script can be downloaded under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$JENKINS_URL/pipeline-syntax/gdsl&lt;/code&gt;. This gdsl file adds tab completion and 
syntax highlighting to editors that support it. In Intellj, place the gdsl file in the root of your groovy source folder.&lt;/p&gt;

&lt;h4 id=&quot;multiple-shared-libraries&quot;&gt;Multiple shared libraries&lt;/h4&gt;

&lt;p&gt;All shared libraries declared by your pipeline script will be loaded in the same environment. They will share the same 
variables and class definitions in the same scope, and use each other’s values and code. Multiple libraries can be 
declared in one statement:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Library(['library1', 'library2@branch']&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;
&lt;p&gt;Best practice from cloudbees&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;https://jenkins.io/doc/book/pipeline/shared-libraries/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.cloudbees.com/hc/en-us/articles/230922208-Pipeline-Best-Practices&quot;&gt;https://support.cloudbees.com/hc/en-us/articles/230922208-Pipeline-Best-Practices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md&quot;&gt;https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/&quot;&gt;https://jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Background info&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/&quot;&gt;https://jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.cloudbees.com/hc/en-us/articles/360012808951-Pipeline-Difference-between-flyweight-and-heavyweight-Executors&quot;&gt;https://support.cloudbees.com/hc/en-us/articles/360012808951-Pipeline-Difference-between-flyweight-and-heavyweight-Executors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Rik van den Ende</name><email>rik.ende@gmail.com</email></author><summary type="html">When you maintain a number of projects, each with their own Jenkinsfile, you will find you are copying the same code over and over again. Shared libraries provide a way to share code and simplify Jenkinsfile creation, allowing your team to produce pipelines faster.</summary></entry><entry><title type="html">Hello world!</title><link href="http://localhost:4000/personal/2020/08/03/hello-world/" rel="alternate" type="text/html" title="Hello world!" /><published>2020-08-03T15:49:13-04:00</published><updated>2020-08-03T15:49:13-04:00</updated><id>http://localhost:4000/personal/2020/08/03/hello-world</id><content type="html" xml:base="http://localhost:4000/personal/2020/08/03/hello-world/">&lt;p&gt;&lt;img src=&quot;/images/2020-08-03/acorn_electron.jpg&quot; alt=&quot;Acorn Electron&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-basic&quot; data-lang=&quot;basic&quot;&gt;10 INPUT &quot;Enter a number from 1 to 10: &quot;; A%
20 PRINT &quot;WRONG! Try again&quot;
30 GOTO 10&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Rik van den Ende</name><email>rik.ende@gmail.com</email></author><summary type="html"></summary></entry></feed>